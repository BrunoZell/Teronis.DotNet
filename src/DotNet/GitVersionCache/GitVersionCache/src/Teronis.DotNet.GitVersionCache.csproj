<Project Sdk="Microsoft.NET.Sdk">

  TODO: MAKE SUB PROJECT PACK IT AND ADD IT IN THIS PROJECT PACK THIS AND MAKE THIS PUBLISHABLE
  
  <PropertyGroup>

    <TargetFramework>netstandard2.0</TargetFramework>
    <!--<TargetFramework>netcoreapp3.1</TargetFramework>-->

    <!--<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>-->

    <!--<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>-->

    <!--<DisabledGitVersionCacheCompilationOutputPath>$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), GitVersion.yml))\.gvc\bin</DisabledGitVersionCacheCompilationOutputPath>-->
    <GitVersionCacheAssemblyFile>$(MSBuildThisFileDirectory)bin\Release\$(TargetFramework)\publish\$(MSBuildThisFilename).dll</GitVersionCacheAssemblyFile>

    <DisableGitVersionCacheImports>false</DisableGitVersionCacheImports>
    <DisableGitVersionCacheImports Condition="'$(DisableGitVersionCache)' == 'true'">true</DisableGitVersionCacheImports>

    <!-- After DisableGitVersionCacheImports has been set we have to disable the target GitVersionCachePreBuild if
         GitVersionCacheAssemblyFile does already exist but not if we are working from the solution named below. -->
    <AlwaysPreBuildGitVersionCache Condition="'$([MSBuild]::GetPathOfFileAbove(GitVersionCache.sln))' == '$(SolutionPath)'">true</AlwaysPreBuildGitVersionCache>
    <DisableGitVersionCachePreBuildTarget Condition="'$(DisableGitVersionCache)' == 'true' Or 'DisableGitVersionCachePreBuildTarget' == 'true' Or ('$(AlwaysPreBuildGitVersionCache)' != 'true' And Exists('$(GitVersionCacheAssemblyFile)'))">true</DisableGitVersionCachePreBuildTarget>

    <!-- DisableGitVersionTask=true -->
    <GitVersionCachePreBuildProperties>
      Configuration=Release;
      PublishProfile=GitVersionCachePreBuild.pubxml;
      DisableGitVersionCache=true;
    </GitVersionCachePreBuildProperties>

  </PropertyGroup>

  <!-- This target is recursive, so to prevent firing more than once, we pass truthy DisableGitVersionCachePreBuildTarget.
       This pre-build is finished before the actual build. When building pre-build GitVersion is disabled. The pre-built
       is implemented in such a way that it can also serve the real build of this project. -->
  <Target Name="GitVersionCachePreBuild" Condition="'$(DisableGitVersionCachePreBuildTarget)' != 'true'" BeforeTargets="BeforeBuild">
    <Exec Command="dotnet msbuild /restore -property:DisableGitVersionCache=true" />
    <!--<MSBuild Projects="$(MSBuildThisFile)" Targets="Restore" Properties="$(GitVersionCachePreBuildProperties)" />-->
    <!--<Exec Command="dotnet msbuild /build -property:DisableGitVersionCache=true" />-->
    <MSBuild Projects="$(MSBuildThisFile)" Targets="Build;Publish" Properties="$(GitVersionCachePreBuildProperties)" />
    <!--<Exec Command="dotnet msbuild -t:Build;Publish -p:$(GitVersionCachePreBuildProperties)" />-->
    <Error Condition="!Exists('$(GitVersionCacheAssemblyFile)')" Text="[$(MSBuildThisFilename)] GitVersionCache assembly file not found. It should have been created just before." />
  </Target>

  <PropertyGroup>
    <DisableGitVersionCache Condition="'$(DisabledGitVersionCacheCompileDirectory)' != '' Or !Exists('$(GitVersionCacheAssemblyFile)')">true</DisableGitVersionCache>
  </PropertyGroup>

  <Import Project="$(MSBuildThisFileDirectory)\build\Teronis.DotNet.GitVersionCache.props" Condition="'$(DisableGitVersionCacheImports)' != 'true'" />

  <PropertyGroup>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Fody" Version="6.0.6">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="16.4.0" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="3.1.1" />
    <PackageReference Include="ModuleInit.Fody" Version="2.1.0" />
    <PackageReference Include="PropertyChanged.Fody" Version="3.2.4" />
    <PackageReference Include="System.Text.Json" Version="4.7.0" />

  </ItemGroup>

  <ItemGroup>
    <Folder Include="buildMultiTargeting\" />
    <Folder Include="tools\" />
    <Folder Include="lib\" />
  </ItemGroup>

  <PropertyGroup>
    <GitVersionToolFilesIncludes>
      $(PkgGitVersionTask)\tools\netstandard2.0\**\GitVersion*.dll;
      $(PkgGitVersionTask)\tools\netstandard2.0\**\GitVersion*.pdb;
      $(PkgGitVersionTask)\tools\netstandard2.0\**\GitVersion*.deps.json
    </GitVersionToolFilesIncludes>
  </PropertyGroup>

  <ItemGroup>

    <!--<None Include="$(GitVersionToolFilesIncludes)" Pack="true" PackagePath="tools\">
      <Link>tools\%(RecursiveDir)\%(Filename)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>-->

    <None Include="$(GitVersionToolFilesIncludes)" Pack="true" PackagePath="tools\">
      <Link>%(Filename)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

    <!--<Reference Include="GitVersionCore">
      <HintPath>$(PkgGitVersionTask)\tools\netstandard2.0\GitVersionCore.dll</HintPath>
      <Private>false</Private>
    </Reference>

    <Reference Include="GitVersionTask.MsBuild">
      <HintPath>$(PkgGitVersionTask)\tools\netstandard2.0\GitVersionTask.MsBuild.dll</HintPath>
      <Private>false</Private>
    </Reference>

    <Reference Include="GitVersionTask">
      <HintPath>$(PkgGitVersionTask)\tools\netstandard2.0\GitVersionTask.dll</HintPath>
      <Private>false</Private>
    </Reference>-->

    <Reference Include="$(PkgGitVersionTask)\tools\netstandard2.0\GitVersionCore.dll">
      <Private>false</Private>
    </Reference>

    <Reference Include="$(PkgGitVersionTask)\tools\netstandard2.0\GitVersionTask.MsBuild.dll">
      <Private>false</Private>
    </Reference>

    <Reference Include="$(PkgGitVersionTask)\tools\netstandard2.0\GitVersionTask.dll">
      <Private>false</Private>
    </Reference>

    <!--<Reference Include="$(MSBuildThisFileDirectory)tools\netstandard2.0\GitVersionCore.dll">
      <Private>false</Private>
    </Reference>

    <Reference Include="$(MSBuildThisFileDirectory)tools\netstandard2.0\GitVersionTask.MsBuild.dll">
      <Private>false</Private>
    </Reference>

    <Reference Include="$(MSBuildThisFileDirectory)tools\netstandard2.0\GitVersionTask.dll">
      <Private>false</Private>
    </Reference>-->

    <None Include="$(PkgGitVersionTask)\build\**\*" Pack="true" PackagePath="build\">
      <Link>build\%(RecursiveDir)\%(Filename)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

    <None Include="$(PkgGitVersionTask)\buildMultiTargeting\**\*" Pack="true" PackagePath="buildMultiTargeting\">
      <Link>buildMultiTargeting\%(RecursiveDir)\%(Filename)%(Extension)</Link>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>

  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\..\..\NetStandard\Core\Core\src\Teronis.NetStandard.Core.csproj" />
  </ItemGroup>

  <Import Project="$(MSBuildThisFileDirectory)\build\Teronis.DotNet.GitVersionCache.targets" Condition="'$(DisableGitVersionCacheImports)' != 'true'" />

</Project>
