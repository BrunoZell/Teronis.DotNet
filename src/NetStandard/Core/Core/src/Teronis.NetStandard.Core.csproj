<Project>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.props" Condition="'$(DisableSdkProps)' != 'true'" />

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;netcoreapp3.1</TargetFrameworks>
    <RootNamespace>Teronis</RootNamespace>
    <Description>This project contains core utility, core extension and core tool functions, but also core classes that extends known structures.</Description>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" Condition="'$(DisableSdkProps)' != 'true'" />

  <!--<Import Project="Teronis.NetStandard.Core.Sdk.props" Condition="'$(DisableSdkProps)' != 'true'" />-->

  <PropertyGroup>
    <!--<GitVersionCacheAssemblyFile Condition="!Exists(GitVersionCacheAssemblyFile)">$(RootDirectory)src\DotNet\GitVersionCache\GitVersionCache\src\bin\$(Configuration)\netcoreapp2.1\publish\Teronis.DotNet.GitVersionCache.dll</GitVersionCacheAssemblyFile>-->
    <!--<GitVersionCacheAssemblyFile Condition="!Exists(GitVersionCacheAssemblyFile)">$(RootDirectory)src\DotNet\GitVersionCache\GitVersionCache\src\bin\$(Configuration)\netstandard2.0\publish\Teronis.DotNet.GitVersionCache.dll</GitVersionCacheAssemblyFile>-->
    <!--<DisableGitVersionCache>true</DisableGitVersionCache>-->

    <!--<FileA>$(RootDirectory)src\MSBuild\Packaging\GitVersionCache\GitVersionCache\src\bin\$(Configuration)\netstandard2.0\packagePublish\build\Teronis.MSBuild.Packaging.GitVersionCache.props</FileA>
    <FileB>$(RootDirectory)src\MSBuild\Packaging\GitVersionCache\GitVersionCache\src\bin\$(Configuration)\netstandard2.0\packagePublish\build\Teronis.MSBuild.Packaging.GitVersionCache.targets</FileB>-->
  </PropertyGroup>

  <!--\bin\$(Configuration)\netcoreapp2.1\publish-->
  <!--<Import Project="$(FileA)" Condition="Exists('$(FileA)') And '$(DisableGitVersionCache)' != 'true'" />
  <Import Project="$(FileB)" Condition="Exists('$(FileB)') And '$(DisableGitVersionCache)' != 'true'" />-->

  <!--<Import Project="$(FileA)" Condition="Exists('$(FileA)') And '$(DisableGitVersionCache)' != 'true'" />
  <Import Project="$(FileB)" Condition="Exists('$(FileB)') And '$(DisableGitVersionCache)' != 'true'" />-->

  <ItemGroup>
    <PackageReference Include="Fody" Version="6.2.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.AspNetCore.Cryptography.KeyDerivation" Version="3.1.0" />
    <PackageReference Include="Microsoft.CSharp" Version="4.7.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" Version="3.1.0" />
    <PackageReference Include="MorseCode.ITask" Version="2.0.3" />
    <PackageReference Include="PropertyChanged.Fody" Version="3.2.8" PrivateAssets="all" />
    <PackageReference Include="PropertyChanging.Fody" Version="1.30.1" PrivateAssets="all" />
    <PackageReference Include="System.Configuration.ConfigurationManager" Version="4.7.0" />
    <PackageReference Include="System.Interactive.Async" Version="4.0.0" />
    <PackageReference Include="System.Management" Version="4.7.0" />
    <PackageReference Include="System.Text.Json" Version="4.7.0" />
    <PackageReference Include="System.Threading.Tasks.Dataflow" Version="4.11.0" />
  </ItemGroup>

  <Target Name="test" BeforeTargets="BeforeTarget">
    <PropertyGroup>
      <EnableSomething>true</EnableSomething>
    </PropertyGroup>
  </Target>

  <ItemGroup>

    <!--<ProjectReference Include="..\..\..\..\MSBuild\Packaging\GitVersionCache\Reference.GitVersionCache\src\Reference.MSBuild.Packaging.GitVersionCache.csproj" />-->
    <!--<ProjectReference Include="..\..\..\..\MSBuild\Packaging\GitVersionCache\GitVersionCache\ref\PackagePublish.MSBuild.Packaging.GitVersionCache.csproj">
      <AdditionalProperties>TargetFramework=netstandard2.0</AdditionalProperties>
    </ProjectReference>-->

    <!--<ProjectReference Include="..\..\..\..\MSBuild\Packaging\GitVersionCache\GitVersionCache\ref\PackagePublish\PackagePublish.MSBuild.Packaging.GitVersionCache.csproj" Condition="'$(DisableGitVersionCache)' != 'true'">
      --><!--<ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
      <GlobalPropertiesToRemove>TargetFramework</GlobalPropertiesToRemove>
      <BuildProjectReferences>false</BuildProjectReferences>--><!--
    </ProjectReference>-->

    <ProjectReference Include="..\..\Core.Localization\src\Teronis.NetStandard.Core.Localization.csproj" PrivateAssets="all" Condition="'$(DisableLocalizationProject)' != 'true'" />

  </ItemGroup>

  <!--<ItemGroup>

    <_ProjectReferences2 Include="@(ProjectReference)">
      <IsPackagePublish Condition="'%(IsPackagePublish)' == ''">$([System.String]::Copy('%(Filename)').Contains('PackagePublish.'))</IsPackagePublish>
      <ReferenceOutputAssembly Condition="'%(IsPackagePublish)' == 'true'">false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties Condition="'%(IsPackagePublish)' == 'true'">true</SkipGetTargetFrameworkProperties>
      <GlobalPropertiesToRemove Condition="'%(IsPackagePublish)' == 'true'">TargetFramework</GlobalPropertiesToRemove>
      <BuildProjectReferences Condition="'%(IsPackagePublish)' == 'true'">false</BuildProjectReferences>
    </_ProjectReferences2>

    <ProjectReference Remove="@(ProjectReference)" />
    <ProjectReference Include="@(_ProjectReferences2)" />

  </ItemGroup>-->

  <!--<Target Name="GetTargetPath" Returns="@(_FakeOutputPath)">
    -->
  <!--<ItemGroup>
      <_FakeOutputPath Include="$(MSBuildProjectDirectory)\$(PackageOutputPath)\$(AssemblyName).UNK" />
    </ItemGroup>-->
  <!--
  </Target>-->

</Project>