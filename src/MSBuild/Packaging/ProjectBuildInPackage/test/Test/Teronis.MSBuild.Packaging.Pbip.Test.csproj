<Project Sdk="Microsoft.NET.Sdk">

  <Import Project="..\..\src\build\Teronis.MSBuild.Packaging.ProjectBuildInPackage.props"/>

  <PropertyGroup>
    <!-- To generate a package is part of the test -->
    <IncludeSymbols>false</IncludeSymbols>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\Teronis.MSBuild.Packaging.ProjectBuildInPackage.csproj" />
    <ProjectReference Include="..\Test.Localization\Teronis.MSBuild.Packaging.Pbip.Test.Localization.csproj" PrivateAssets="all" />
  </ItemGroup>

  <!-- Target searches for single package, but does return group of FoundPackage. -->
  <Target Name="SearchPackage" Returns="@(FoundPackage)">

    <Message Text="[$(MSBuildThisFileName)] Try to find package $(PackageSearchId) in $(PackageSearchDirectory)" Importance="high" />

    <ItemGroup>
      <_FoundPackageFiles Include="$(PackageSearchDirectory)\*.nupkg" />
    </ItemGroup>

    <Message Text="[$(MSBuildThisFileName)] - Found package file -&gt; %(_FoundPackageFiles.Identity)" Importance="high" />

    <Error Condition="@(_FoundPackageFiles-&gt;Count()) == 0" Text="[$(MSBuildThisFileName)] An error occured: In the folder $(PackageSearchDirectory) is no package. Please pack project." />
    <Error Condition="@(_FoundPackageFiles-&gt;Count()) &gt; 1" Text="[$(MSBuildThisFileName)] An error occured: In the folder $(PackageSearchDirectory) is more than one package. Please delete relicts." />

    <ItemGroup>
      <FoundPackage Include="@(_FoundPackageFiles)">
        <Id>$(PackageSearchId)</Id>
        <Version>$([System.String]::Copy('%(Filename)').Replace('$(PackageSearchId).',''))</Version>
      </FoundPackage>
    </ItemGroup>

    <Message Text="[$(MSBuildThisFileName)] - Evaluated package version -&gt; %(FoundPackage.Version)" Importance="high" />

  </Target>

  <PropertyGroup>
    <FeatureProjectId>Teronis.MSBuild.Packaging.ProjectBuildInPackage</FeatureProjectId>

    <FeatureProjectPath>$(MSBuildThisFileDirectory)..\..\src\bin\$(Configuration)</FeatureProjectPath>
    <FeatureProjectPath>$([System.IO.Path]::GetFullPath('$(FeatureProjectPath)'))</FeatureProjectPath>

    <RestoreSources>$(FeatureProjectPath)</RestoreSources>

    <SearchFeaturePackageProperties>
      PackageSearchDirectory=$(FeatureProjectPath);
      PackageSearchId=$(FeatureProjectId)
    </SearchFeaturePackageProperties>
  </PropertyGroup>

  <PropertyGroup>
    <LocalPackageSearchProperties>
      PackageSearchDirectory=$(MSBuildProjectDirectory)\bin\$(Configuration);
      PackageSearchId=$(MSBuildThisFileName)
    </LocalPackageSearchProperties>
  </PropertyGroup>

  <!-- Target does test local package -->
  <Target Name="TestLocalPackage" AfterTargets="Pack">
    <MSBuild Projects="$(MSBuildThisFile)" Targets="SearchPackage" Properties="$(LocalPackageSearchProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="FoundLocalPackage" />
    </MSBuild>

    <PropertyGroup>
      <UnzipDestinationFolder>%(FoundLocalPackage.RootDir)%(FoundLocalPackage.Directory)%(FoundLocalPackage.Filename)</UnzipDestinationFolder>
    </PropertyGroup>

    <Unzip SourceFiles="@(FoundLocalPackage)" DestinationFolder="$(UnzipDestinationFolder)" />

    <ItemGroup>
      <UnzippedFiles Include="$(UnzipDestinationFolder)\**\*" />

      <UnzippedFiles Include="@(UnzippedFiles)">
        <DirectoryWithoutSlash>$([System.IO.Path]::GetFileName($([System.IO.Path]::GetDirectoryName('%(UnzippedFiles.FullPath)'))))\%(UnzippedFiles.Filename)%(UnzippedFiles.Extension)</DirectoryWithoutSlash>
      </UnzippedFiles>
    </ItemGroup>

    <PropertyGroup>
      <HasLocalizationResources>false</HasLocalizationResources>
      <HasLocalizationResources Condition="'en-US\$(MSBuildThisFilename).Localization.resources.dll' == '%(UnzippedFiles.DirectoryWithoutSlash)'">true</HasLocalizationResources>
    </PropertyGroup>

    <Error Condition="'$(HasLocalizationResources)' != 'true'" Text="[$(MSBuildThisFileName)] Test failed: The local package %(FoundLocalPackage.Identity) did not contain expected private assets." />
    <Message Text="[$(MSBuildThisFileName)] Test succeeded: The local package %(FoundLocalPackage.Identity) contained expected private assets." Importance="high" />

  </Target>

  <!-- Target does delete local package -->
  <Target Name="DeleteLocalPackage" AfterTargets="TestLocalPackage">
    <Delete Files="@(UnzippedFiles)" />
    <RemoveDir Directories="@(UnzippedFiles->'%(RootDir)%(Directory)')" />
    
    <Delete Files="@(FoundLocalPackage)" />
    <Message Text="[$(MSBuildThisFileName)] package %(FoundLocalPackage.Filename)%(FoundLocalPackage.Extension) has been deleted from the disk." Importance="high" />
  </Target>
  
  <Import Project="..\..\src\build\Teronis.MSBuild.Packaging.ProjectBuildInPackage.targets"/>

</Project>