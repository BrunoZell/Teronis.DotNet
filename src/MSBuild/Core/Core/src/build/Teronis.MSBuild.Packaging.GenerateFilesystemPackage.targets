<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--<Import Project="TargetTasks.targets" Condition="'$(IsTeronisMSBuildCoreTargetTasksImported)' != 'true'"/>-->

  <PropertyGroup>
    <IsTeronisMSBuildPackUnzipPackageTargetsImported>true</IsTeronisMSBuildPackUnzipPackageTargetsImported>
    <!-- The location where to search. -->
    <UnzipPackageDirectory Condition="'$(UnzipPackageDirectory)' == ''">$(MSBuildProjectDirectory)\bin\$(Configuration)</UnzipPackageDirectory>
    <!-- The location where to unzip. -->
    <UnzipPackageDestinationDirectory Condition="'$(UnzipPackageDestinationDirectory)' == ''">$(MSBuildProjectDirectory)\bin\$(Configuration)\$(TargetFramework)\packagePublish</UnzipPackageDestinationDirectory>
    <_TargetTasksTargets Condition="'$(_TargetTasksTargets)' == ''">$(MSBuildThisFileDirectory)TargetTasks.targets</_TargetTasksTargets>
    <_UnzipPackageId>FilesystemPackage.$(MSBuildProjectName)</_UnzipPackageId>
  </PropertyGroup>

  <!--Condition="!Exists('$(UnzipPackageDestinationDirectory)')"-->
  <Target Name="GenerateFilesystemPackage" DependsOnTargets="$(GenerateFilesystemPackageDependsOn)">

    <Message Text="[$(MSBuildThisFileName)] Generate filesystem package for $(MSBuildProjectName). (Configuration=$(Configuration), TargetFramework=$(TargetFramework)" Importance="high" />

    <PropertyGroup>
      <ThisProjectMSBuildProperties>
        Configuration=$(Configuration);
        PackageId=$(_UnzipPackageId);
        PackageVersion=0.0.1-$(TargetFramework.ToLower().Replace('.','v'));
        DisableGitVersionTask=true
      </ThisProjectMSBuildProperties>
    </PropertyGroup>

    <MSBuild Projects="$(MSBuildProjectDirectory)\$(MSBuildProjectName).csproj" Targets="Pack" Properties="$(ThisProjectMSBuildProperties)" />

    <PropertyGroup>

      <_UnzipPackageSearchProperties>
        UnzipPackageDirectory=$(UnzipPackageDirectory);
        UnzipPackageId=$(_UnzipPackageId);
        UnzipPackageDestinationDirectory=$(UnzipPackageDestinationDirectory)
      </_UnzipPackageSearchProperties>

    </PropertyGroup>

    <MSBuild Projects="$(_TargetTasksTargets)" Targets="UnzipPackage" Properties="$(_UnzipPackageSearchProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="_FoundPackage" />
    </MSBuild>

    <Delete Files="@(_FoundPackage)" />

  </Target>

  <Target Name="_CleanFilesystemPackage" DependsOnTargets="$(CleanFilesystemPackageDependsOn)" BeforeTargets="BeforeClean">

    <!--<ItemGroup>
      <_FilesystemPackageFiles Include="$(UnzipPackageDestinationDirectory)\**\*" Condition="Exists('$(UnzipPackageDestinationDirectory)')" />
      <_FilesystemPackageDirectories Include="$([System.IO.Directory]::GetDirectories('$(UnzipPackageDestinationDirectory)', '*', System.IO.SearchOption.AllDirectories))" Condition="Exists('$(UnzipPackageDestinationDirectory)')" />
    </ItemGroup>

    <Delete Files="@(_FilesystemPackageFiles)" />
    <RemoveDir Directories="@(_FilesystemPackageDirectories)" Condition="Exists('$(UnzipPackageDestinationDirectory)')" />
    <RemoveDir Directories="$(UnzipPackageDestinationDirectory)" Condition="Exists('$(UnzipPackageDestinationDirectory)')" />-->

    <PropertyGroup>
      <DeleteDirectoryMSBuildProperties>
        Directory=$(UnzipPackageDestinationDirectory);
        Retries=5
      </DeleteDirectoryMSBuildProperties>
    </PropertyGroup>

    <MSBuild Projects="$(_TargetTasksTargets)" Targets="DeleteDirectory" Properties="$(DeleteDirectoryMSBuildProperties)" ContinueOnError="true" />

  </Target>

</Project>