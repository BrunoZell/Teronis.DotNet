<?xml version="1.0" encoding="utf-8" ?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Condition="'$(IsMSBuildFileImported)' != 'true'" Project="$([MSBuild]::GetPathOfFileAbove(.msbuild))" />
  <Import Condition="'$(IsTeronisDotNetCorePropsFileImported)' != 'true'" Project="$(RootCorePropsPath)" />
  <Import Project="$(TeronisMSBuildPackagingProjectBuildInPackageTargetsFile)" />
  
  <ItemGroup>
	  <Compile Include="$(MSBuildThisFileDirectory)/Nullable.cs" Conditions="'$(Nullable)' == 'enable'" />
  </ItemGroup>

  <ItemGroup>

    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" Conditions="'$(DisableGitVersionCache)' != 'true' And $(IsPackable)" />

    <ProjectReference Include="$(MSBuildThisFileDirectory)src\MSBuild\Packaging\GitVersionCache\GitVersionCache\ref\PackagePublish\PackagePublish.MSBuild.Packaging.GitVersionCache.csproj" Condition="'$(DisableGitVersionCache)' != 'true' And $(IsPackable)" />
    
  </ItemGroup>

  <PropertyGroup>
    <_TeronisMSBuildPackagingGitVersionCachePropsFile>$(TeronisMSBuildPackagingGitVersionCachePropsFileTemplate.Replace('(Configuration)','$(Configuration)'))</_TeronisMSBuildPackagingGitVersionCachePropsFile>
    <_TeronisMSBuildPackagingGitVersionCacheTargetsFile>$(TeronisMSBuildPackagingGitVersionCacheTargetsFileTemplate.Replace('(Configuration)','$(Configuration)'))</_TeronisMSBuildPackagingGitVersionCacheTargetsFile>
  </PropertyGroup>

  <Import Project="$(_TeronisMSBuildPackagingGitVersionCachePropsFile)" Condition="Exists('$(_TeronisMSBuildPackagingGitVersionCachePropsFile)') And '$(DisableGitVersionCache)' != 'true'" />
  <Import Project="$(_TeronisMSBuildPackagingGitVersionCacheTargetsFile)" Condition="Exists('$(_TeronisMSBuildPackagingGitVersionCacheTargetsFile)') And '$(DisableGitVersionCache)' != 'true'" />

  <ItemGroup>

    <_ProjectReferences Include="@(ProjectReference)">
      <!-- Prevent PackagePublish.*-projects from being tracked in *.nuspec files. -->
      <IsPackagePublishProject Condition="'%(IsPackagePublishProject)' == ''">$([System.String]::Copy('%(Filename)').Contains('PackagePublish.'))</IsPackagePublishProject>
      <ReferenceOutputAssembly Condition="'%(IsPackagePublishProject)' == 'true'">false</ReferenceOutputAssembly>
      <SkipGetTargetFrameworkProperties Condition="'%(IsPackagePublishProject)' == 'true'">true</SkipGetTargetFrameworkProperties>
      <GlobalPropertiesToRemove Condition="'%(IsPackagePublishProject)' == 'true'">TargetFramework</GlobalPropertiesToRemove>
      <BuildProjectReferences Condition="'%(IsPackagePublishProject)' == 'true'">false</BuildProjectReferences>

      <!-- <AdditionalProperties Condition="'%(Filename)' == 'Teronis.NetStandard.Core'">%(AdditionalProperties);TargetFramework=netstandard2.0</AdditionalProperties> -->
      <!-- <AdditionalProperties >%(AdditionalProperties);TargetFramework=$(TargetFramework)</AdditionalProperties> -->
      <!-- <AdditionalProperties Condition="'%(Filename)' == 'Teronis.NetStandard.Core'">TargetFramework=$(TargetFramework)</AdditionalProperties> -->
      <AdditionalProperties Condition="'%(Filename)' == 'Teronis.NetStandard.Core'">%(AdditionalProperties);TargetFramework=$(TargetFramework)</AdditionalProperties>
    </_ProjectReferences>

    <ProjectReference Remove="@(ProjectReference)" />
    <ProjectReference Include="@(_ProjectReferences)" />

  </ItemGroup>

  <Target Name="_DirectoryBuildBeforeClean" BeforeTargets="BeforeClean">
    <PropertyGroup>
      <DisableGitVersionCache>true</DisableGitVersionCache>
    </PropertyGroup>
  </Target>

  <Target Name="_DirectoryBuildAfterClean" BeforeTargets="AfterClean">
    <PropertyGroup>
      <DisableGitVersionCache>false</DisableGitVersionCache>
    </PropertyGroup>
  </Target>

  <!-- <Target Name="InstallGitVersionTask" >

    <PropertyGroup>
      <HasGitVersionTask Condition="'%(PackageReference.Identity)' == 'GitVersionTask'">true</HasGitVersionTask>
    </PropertyGroup>

    <ItemGroup Condition="'$(DisableGitVersionTaskAutoInstall)' != 'true' And '$(HasGitVersionTask)' != 'true'">
      <PackageReference Include="GitVersionTask" Version="$(GitVersionTaskVersion)">
        <PrivateAssets>all</PrivateAssets>
        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      </PackageReference>
    </ItemGroup>

  </Target> -->

</Project>
